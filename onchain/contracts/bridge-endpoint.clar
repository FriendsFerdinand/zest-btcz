(use-trait sip010-trait .trait-sip-010.sip-010-trait)
(define-constant err-unauthorised (err u1000))
(define-constant err-paused (err u1001))
(define-constant err-peg-in-address-not-found (err u1002))
(define-constant err-invalid-amount (err u1003))
(define-constant err-invalid-tx (err u1004))
(define-constant err-already-sent (err u1005))
(define-constant err-address-mismatch (err u1006))
(define-constant err-request-already-revoked (err u1007))
(define-constant err-request-already-finalized (err u1008))
(define-constant err-revoke-grace-period (err u1009))
(define-constant err-request-already-claimed (err u1010))
(define-constant err-bitcoin-tx-not-mined (err u1011))
(define-constant err-invalid-input (err u1012))
(define-constant err-tx-mined-before-request (err u1013))
(define-constant err-dest-mismatch (err u1014))
(define-constant err-token-mismatch (err u1015))
(define-constant err-slippage (err u1016))
(define-constant MAX_UINT u340282366920938463463374607431768211455)
(define-constant ONE_8 u100000000)
(define-data-var contract-owner principal tx-sender)
(define-data-var fee-address principal tx-sender)
(define-data-var peg-in-paused bool true)
(define-data-var peg-out-paused bool true)
(define-data-var peg-in-fee uint u0)
(define-data-var peg-out-fee uint u0)
(define-data-var peg-out-gas-fee uint u0)
(define-public (set-contract-owner (new-contract-owner principal))
	(begin
		(try! (is-contract-owner))
		(ok (var-set contract-owner new-contract-owner))))
(define-public (set-fee-address (new-fee-address principal))
	(begin
		(try! (is-contract-owner))
		(ok (var-set fee-address new-fee-address))))
(define-public (pause-peg-in (paused bool))
	(begin
		(try! (is-contract-owner))
		(ok (var-set peg-in-paused paused))))
(define-public (pause-peg-out (paused bool))
	(begin
		(try! (is-contract-owner))
		(ok (var-set peg-out-paused paused))))
(define-public (set-peg-in-fee (fee uint))
	(begin
		(try! (is-contract-owner))
		(ok (var-set peg-in-fee fee))))
(define-public (set-peg-out-fee (fee uint))
	(begin
		(try! (is-contract-owner))
		(ok (var-set peg-out-fee fee))))
(define-public (set-peg-out-gas-fee (fee uint))
	(begin
		(try! (is-contract-owner))
		(ok (var-set peg-out-gas-fee fee))))
(define-read-only (is-peg-in-paused)
	(var-get peg-in-paused))
(define-read-only (is-peg-out-paused)
	(var-get peg-out-paused))
(define-read-only (get-peg-in-fee)
	(var-get peg-in-fee))
(define-read-only (get-peg-out-fee)
	(var-get peg-out-fee))
(define-read-only (get-peg-out-gas-fee)
	(var-get peg-out-gas-fee))
(define-read-only (is-peg-in-address-approved (address (buff 128)))
	(contract-call? .btc-bridge-registry-v1-01 is-peg-in-address-approved address))
(define-read-only (get-peg-in-sent-or-default (tx (buff 4096)) (output uint))
	(contract-call? .btc-bridge-registry-v1-01 get-peg-in-sent-or-default tx output))
(define-read-only (get-fee-address)
	(var-get fee-address))

(define-read-only (extract-tx-ins-outs (tx (buff 4096)))
	(if (try! (contract-call? .clarity-bitcoin-v1-02 is-segwit-tx tx))
		(let (
				(parsed-tx (unwrap! (contract-call? .clarity-bitcoin-v1-02 parse-wtx tx) err-invalid-tx)))
			(ok { ins: (get ins parsed-tx), outs: (get outs parsed-tx) }))
		(let (
				(parsed-tx (unwrap! (contract-call? .clarity-bitcoin-v1-02 parse-tx tx) err-invalid-tx)))
			(ok { ins: (get ins parsed-tx), outs: (get outs parsed-tx) }))
	))

(define-read-only (get-txid (tx (buff 4096)))
	(if (try! (contract-call? .clarity-bitcoin-v1-02 is-segwit-tx tx))
		(ok (contract-call? .clarity-bitcoin-v1-02 get-segwit-txid tx))
		(ok (contract-call? .clarity-bitcoin-v1-02 get-txid tx))
	))

(define-read-only (verify-mined (tx (buff 4096)) (block { header: (buff 80), height: uint }) (proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint }))
	(if (is-eq chain-id u1)
		(let (
				(response (if (try! (contract-call? .clarity-bitcoin-v1-02 is-segwit-tx tx))
					(contract-call? .clarity-bitcoin-v1-02 was-segwit-tx-mined? block tx proof)
					(contract-call? .clarity-bitcoin-v1-02 was-tx-mined? block tx proof))
				))
			(if (or (is-err response) (not (unwrap-panic response)))
				err-bitcoin-tx-not-mined
				(ok true)
			))
		(ok true))) ;; if not mainnet, assume verified

(define-read-only (create-order-0-or-fail (order principal))
	(ok (unwrap! (to-consensus-buff? order) err-invalid-input)))

(define-read-only (decode-order-0-or-fail (order-script (buff 128)))
	(let (
			(op-code (unwrap-panic (slice? order-script u1 u2))))
			(ok (unwrap! (from-consensus-buff? principal (unwrap-panic (slice? order-script (if (< op-code 0x4c) u2 u3) (len order-script)))) err-invalid-input))))

;; (define-read-only (finalize-peg-in-0
;; 	(tx (buff 4096))
;; 	(block { header: (buff 80), height: uint })
;; 	(proof { tx-index: uint, hashes: (list 14 (buff 32)), tree-depth: uint })
;; 	(output-idx uint) (order-idx uint))
;; 	(let (
;; 		(common-check (try! (verify-mined tx block proof)))
;; 		(parsed-tx (try! (extract-tx-ins-outs tx)))
;;     (output (unwrap! (element-at (get outs parsed-tx) output-idx) err-invalid-tx))
;;     (amount (get value output))
;;     (peg-in-address (get scriptPubKey output))
;;     (order-script (get scriptPubKey (unwrap-panic (element-at? (get outs parsed-tx) order-idx))))
;;     (fee (mul-down amount (var-get peg-in-fee)))
;;     (amount-net (- amount fee))
;;     (order-details (try! (decode-order-0-or-fail order-script)))
;;     )
;; 		(asserts! (not (var-get peg-in-paused)) err-paused)
;;     (asserts! (not (get-peg-in-sent-or-default tx output-idx)) err-already-sent)
;;     (asserts! (is-peg-in-address-approved peg-in-address) err-peg-in-address-not-found)
;;     (asserts! (> amount-net u0) err-invalid-amount)
    
;; 		(print { type: "peg-in", tx-id: (try! (get-txid tx)), output: output-idx, order-details: order-details, fee: fee, amount-net: amount-net })
;; 		(ok { fee: fee, amount-net: amount-net, recipient: order-details })
;;   )
;; )

;; (define-public (request-peg-out-0 (peg-out-address (buff 128)) (amount uint))
;; 	(let (
;; 			(fee (mul-down amount (var-get peg-out-fee)))
;; 			(gas-fee (var-get peg-out-gas-fee))
;; 			(check-amount (asserts! (> amount (+ fee gas-fee)) err-invalid-amount))
;; 			(amount-net (- amount fee gas-fee))
;; 			(request-details { requested-by: tx-sender, peg-out-address: peg-out-address, amount-net: amount-net, fee: fee, gas-fee: gas-fee, claimed: u0, claimed-by: tx-sender, fulfilled-by: 0x, revoked: false, finalized: false, requested-at: block-height, requested-at-burn-height: burn-block-height })
;; 			(request-id (as-contract (try! (contract-call? .btc-bridge-registry-v1-01 set-request u0 request-details))))
;;       )
;; 		(asserts! (not (var-get peg-out-paused)) err-paused)
;; 		;; (try! (contract-call? .token-btc transfer amount tx-sender (as-contract tx-sender) none))
;; 		(print (merge request-details { type: "request-peg-out", request-id: request-id }))
;; 		(ok request-id)
;; 	)
;; )

;; (define-public (finalize-peg-out (request-id uint))
;; 	(let (
;; 			(request-details (try! (get-request-or-fail request-id)))
;; 			)
;; 		(asserts! (not (var-get peg-out-paused)) err-paused)
;; 		(asserts! (not (get revoked request-details)) err-request-already-revoked)
;; 		(asserts! (not (get finalized request-details)) err-request-already-finalized)
;; 		(print { type: "finalize-peg-out", request-id: request-id })
;; 		(ok true)
;;   )
;; )

(define-private (is-contract-owner)
	(ok (asserts! (is-eq (var-get contract-owner) tx-sender) err-unauthorised)))
(define-private (min (a uint) (b uint))
	(if (< a b) a b))
(define-private (mul-down (a uint) (b uint))
	(/ (* a b) ONE_8))
(define-private (div-down (a uint) (b uint))
	(if (is-eq a u0)
		u0
		(/ (* a ONE_8) b)))